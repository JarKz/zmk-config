#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define ENG 0
#define RUS 1
#define GAMING 2
#define NUM 3
#define FUN 4
#define BOOT 5

#define TOGGLE_LANGUAGE LG(SPACE)
#define TOGGLE_LANGUAGE_TIME 150

#define RUS_COMMA QMARK
#define RUS_QMARK AMPS
#define RUS_DOT SLASH

&lt {
    quick-tap-ms = <200>;
    tapping-term-ms = <200>;
    flavor = "hold-preferred";
};

&mt {
    quick-tap-ms = <200>;
    tapping-term-ms = <200>;
    flavor = "hold-preferred";
};

/ {
    behaviors {
        tog_lang: toggle_language {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <TOGGLE_LANGUAGE_TIME>;
            bindings = <&kp GRAVE>, <&toggle_lang>;
        };

        dikt_soft: diktor_soft_sign {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp M>, <&kp RBKT>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        dikt_comma: diktor_comma {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp RUS_COMMA>, <&kp RUS_QMARK>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        dikt_dot: diktor_dot {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp RUS_DOT>, <&kp EXCL>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        dikt_w_mm_q: diktor_W_modmorph_Q {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp W>, <&kp Q>;
            mods = <(MOD_LCTL|MOD_RCTL|MOD_LGUI|MOD_RGUI)>;
            keep-mods = <(MOD_LCTL|MOD_RCTL|MOD_LGUI|MOD_RGUI)>;
        };

        dikt_soft_mm_w: diktor_soft_modmorph_W {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&dikt_soft>, <&kp W>;
            mods = <(MOD_LCTL|MOD_RCTL|MOD_LGUI|MOD_RGUI)>;
            keep-mods = <(MOD_LCTL|MOD_RCTL|MOD_LGUI|MOD_RGUI)>;
        };

        dikt_b_mm_r: diktor_B_modmorph_R {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp B>, <&kp R>;
            mods = <(MOD_LCTL|MOD_RCTL|MOD_LGUI|MOD_RGUI)>;
            keep-mods = <(MOD_LCTL|MOD_RCTL|MOD_LGUI|MOD_RGUI)>;
        };

        dikt_j_mm_t: diktor_J_modmorph_T {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp J>, <&kp T>;
            mods = <(MOD_LCTL|MOD_RCTL|MOD_LGUI|MOD_RGUI)>;
            keep-mods = <(MOD_LCTL|MOD_RCTL|MOD_LGUI|MOD_RGUI)>;
        };

        dikt_a_mm_z: diktor_A_modmorph_Z {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp A>, <&kp Z>;
            mods = <(MOD_LCTL|MOD_RCTL|MOD_LGUI|MOD_RGUI)>;
            keep-mods = <(MOD_LCTL|MOD_RCTL|MOD_LGUI|MOD_RGUI)>;
        };

        dikt_sqt_mm_x: diktor_SQT_modmorph_X {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp SQT>, <&kp X>;
            mods = <(MOD_LCTL|MOD_RCTL|MOD_LGUI|MOD_RGUI)>;
            keep-mods = <(MOD_LCTL|MOD_RCTL|MOD_LGUI|MOD_RGUI)>;
        };

        dikt_lbkt_mm_c: diktor_LBKT_modmorph_C {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp LBKT>, <&kp C>;
            mods = <(MOD_LCTL|MOD_RCTL|MOD_LGUI|MOD_RGUI)>;
            keep-mods = <(MOD_LCTL|MOD_RCTL|MOD_LGUI|MOD_RGUI)>;
        };

        dikt_s_mm_v: diktor_S_modmorph_V {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp S>, <&kp V>;
            mods = <(MOD_LCTL|MOD_RCTL|MOD_LGUI|MOD_RGUI)>;
            keep-mods = <(MOD_LCTL|MOD_RCTL|MOD_LGUI|MOD_RGUI)>;
        };

        dikt_dot_mm_b: diktor_DOT_modmorph_B {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp DOT>, <&kp B>;
            mods = <(MOD_LCTL|MOD_RCTL|MOD_LGUI|MOD_RGUI)>;
            keep-mods = <(MOD_LCTL|MOD_RCTL|MOD_LGUI|MOD_RGUI)>;
        };
    };

    macros {
        toggle_lang: to_english_or_russian {
            compatible = "zmk,behavior-macro";
            wait-ms = <20>;
            tap-ms = <20>;
            #binding-cells = <0>;
            bindings
                = <&macro_tap &kp TOGGLE_LANGUAGE>
                , <&macro_tap &tog RUS>
                ;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        english_colemak_layer {
            bindings = <
                &tog_lang         &kp Q          &kp W             &kp F             &kp P             &kp G          &kp J          &kp L            &kp U          &kp Y          &kp SEMI          &kp RBKT
                &mt LCTRL ESC     &kp A          &kp R             &kp S             &kp T             &kp D          &kp H          &kp N            &kp E          &kp I          &kp O             &kp SQT
                &mt LALT MINUS    &kp Z          &kp X             &kp C             &kp V             &kp B          &kp K          &kp M            &kp COMMA      &kp DOT        &kp FSLH          &kp BSLH
                                                                   &lt FUN TAB       &mt LSHFT SPACE   &lt NUM RET    &lt NUM BSPC   &mt RSHFT SPACE  &lt FUN DEL
            >;
        };

        russian_diktor_layer {
            bindings = <
                &tog_lang         &dikt_w_mm_q   &dikt_soft_mm_w   &kp Z             &dikt_comma       &dikt_dot      &kp P          &kp D            &kp R          &kp L          &kp X             &kp I
                &mt LCTRL ESC     &kp E          &dikt_b_mm_r      &kp T             &dikt_j_mm_t      &kp F          &kp K          &kp Y            &kp N          &kp C          &kp H             &kp Q
                &mt LALT MINUS    &dikt_a_mm_z   &dikt_sqt_mm_x    &dikt_lbkt_mm_c   &dikt_s_mm_v      &dikt_dot_mm_b &kp COMMA      &kp V            &kp G          &kp U          &kp SEMI          &kp O
                                                                   &lt FUN TAB       &mt LSHFT SPACE   &lt NUM RET    &lt NUM BSPC   &mt RSHFT SPACE  &lt FUN DEL
            >;
        };

        gaming_layer {
            bindings = <
                &none             &kp Q          &kp W             &kp F             &kp P             &kp G          &kp J          &kp L            &kp U          &kp Y          &kp SEMI          &kp RBKT
                &kp ESC           &kp A          &kp R             &kp S             &kp T             &kp D          &kp H          &kp N            &kp E          &kp I          &kp O             &kp SQT
                &mt LALT MINUS    &kp Z          &kp X             &kp C             &kp V             &kp B          &kp K          &kp M            &kp COMMA      &kp DOT        &kp FSLH          &kp BSLH
                                                                   &kp LSHIFT        &kp SPACE         &kp RET        &lt NUM BSPC   &mt RSHFT SPACE  &lt FUN DEL
            >;
        };

        numbers_layer {
            bindings = <
                &tog GAMING       &kp N1         &kp N2            &kp N3            &kp N4            &kp N5         &kp N6         &kp N7           &kp N8         &kp N9         &kp N0            &none
                &kp LG(SPACE)     &kp EXCL       &kp AT            &kp HASH          &kp DLLR          &kp PRCNT      &kp CARET      &kp AMPS         &kp STAR       &kp BSLH       &kp RGUI          &kp RCTRL
                &kp LA(SPACE)     &kp LGUI       &none             &kp MINUS         &kp PLUS          &kp EQUAL      &kp LPAR       &kp RPAR         &kp LBKT       &kp RBKT       &kp LS(LBKT)      &kp LS(RBKT)
                                                                   &trans            &trans            &trans         &trans         &trans           &trans
            >;
        };

        functional_layer {
            bindings = <
                &kp INS           &kp F1         &kp F2            &kp F3            &kp F4            &kp C_VOL_UP   &none          &kp HOME         &kp PSCRN      &kp PG_UP      &kp C_BRI_INC     &kp CLCK
                &kp K_APP         &kp F5         &kp F6            &kp F7            &kp F8            &kp C_MUTE     &kp LEFT       &kp DOWN         &kp UP         &kp RIGHT      &none             &kp RCTRL
                &none             &kp F9         &kp F10           &kp F11           &kp F12           &kp C_VOL_DN   &none          &kp END          &none          &kp PG_DN      &kp C_BRI_DEC     &kp RALT
                                                                   &trans            &trans            &mo BOOT       &mo BOOT       &trans           &trans
            >;
        };

        boot_layer {
            bindings = <
                &bootloader       &none          &none             &none             &none             &none          &none          &none            &none          &none          &none             &bootloader
                &bt BT_CLR        &bt BT_SEL 0   &bt BT_SEL 1      &bt BT_SEL 2      &bt BT_SEL 3      &bt BT_SEL 4   &bt BT_SEL 4   &bt BT_SEL 3     &bt BT_SEL 2   &bt BT_SEL 1   &bt BT_SEL 0      &bt BT_CLR
                &sys_reset        &none          &none             &none             &none             &none          &none          &none            &none          &none          &none             &sys_reset
                                                                   &trans            &none             &trans         &none          &trans           &trans
            >;
        };
    };
};
