#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define ENG 0
#define RUS 1
#define NUM 2
#define FUN 3
#define BOOT 4

#define TOGGLE_LANGUAGE LG(SPACE)
#define TOGGLE_LANGUAGE_TIME 350

#define RUS_COMMA QMARK
#define RUS_QMARK AMPS
#define RUS_DOT SLASH

&lt {
    quick-tap-ms = <200>;
    tapping-term-ms = <200>;
    flavor = "hold-preferred";
};

&mt {
    quick-tap-ms = <200>;
    tapping-term-ms = <200>;
    flavor = "balanced";
};

/ {
    behaviors {
        to_eng: to_eng {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <TOGGLE_LANGUAGE_TIME>;
            bindings = <&kp I>, <&to_english>;
        };

        to_rus: to_rus {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <TOGGLE_LANGUAGE_TIME>;
            bindings = <&kp RBKT>, <&to_russian>;
        };

        dikt_soft: diktor_soft_sign {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp M>, <&kp RBKT>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        dikt_comma: diktor_comma {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp RUS_COMMA>, <&kp RUS_QMARK>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        dikt_dot: diktor_dot {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp RUS_DOT>, <&kp EXCL>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };

    macros {
        to_english: to_english {
            compatible = "zmk,behavior-macro";
            wait-ms = <20>;
            tap-ms = <20>;
            #binding-cells = <0>;
            bindings
                = <&macro_tap &kp TOGGLE_LANGUAGE>
                , <&macro_tap &tog RUS>
                ;
        };

        to_russian: to_russian {
            compatible = "zmk,behavior-macro";
            wait-ms = <20>;
            tap-ms = <20>;
            #binding-cells = <0>;
            bindings
                = <&macro_tap &kp TOGGLE_LANGUAGE>
                , <&macro_tap &tog RUS>
                ;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        english_colemak_layer {
            bindings = <
                &kp LBKT          &kp Q   &kp W   &kp F         &kp P             &kp G         &kp J          &kp L            &kp U         &kp Y     &kp SEMI         &to_rus
                &mt LCTRL ESC     &kp A   &kp R   &kp S         &kp T             &kp D         &kp H          &kp N            &kp E         &kp I     &kp O            &mt RCTRL SQT
                &mt LALT MINUS    &kp Z   &kp X   &kp C         &kp V             &kp B         &kp K          &kp M            &kp COMMA     &kp DOT   &mt GRAVE FSLH   &mt RALT BSLH
                                                  &lt FUN TAB   &mt LSHFT SPACE   &lt NUM RET   &lt NUM BSPC   &mt RSHFT SPACE  &lt FUN DEL
            >;
        };

        russian_diktor_layer {
            bindings = <
                &kp RBKT          &kp W   &dikt_soft   &kp Z         &dikt_comma       &dikt_dot     &kp P          &kp D            &kp R         &kp L     &kp X            &to_eng
                &mt LCTRL ESC     &kp E   &kp B        &kp T         &kp J             &kp F         &kp K          &kp Y            &kp N         &kp C     &kp H            &mt RCTRL Q
                &mt LALT MINUS    &kp A   &kp SQT      &kp RBKT      &kp S             &kp DOT       &kp COMMA      &kp V            &kp G         &kp U     &mt GRAVE SEMI   &mt RALT O
                                                       &lt FUN TAB   &mt LSHFT SPACE   &lt NUM RET   &lt NUM BSPC   &mt RSHFT SPACE  &lt FUN DEL
            >;
        };

        numbers_layer {
            bindings = <
                &mt LGUI N0           &kp N1     &kp N2   &kp N3        &kp N4     &kp N5      &kp N6      &kp N7     &kp N8        &kp N9     &none          &none
                &mt LCTRL LG(SPACE)   &kp EXCL   &kp AT   &kp HASH      &kp DLLR   &kp PRCNT   &kp CARET   &kp AMPS   &kp STAR      &kp BSLH   &none          &mt RCTRL MINUS
                &mt LALT LA(SPACE)    &kp LGUI   &none    &kp MINUS     &kp PLUS   &kp EQUAL   &kp LPAR    &kp RPAR   &kp LBKT      &kp RBKT   &kp LS(LBKT)   &kp LS(RBKT)
                                                          &trans        &trans     &trans      &trans      &trans     &trans
            >;
        };

        functional_layer {
            bindings = <
                &kp LGUI    &mo BOOT   &none   &none    &none    &kp C_VOL_UP   &none       &kp HOME   &kp PSCRN   &kp PG_UP   &mo BOOT          &kp CLCK
                &kp LCTRL   &none      &none   &none    &none    &kp C_MUTE     &kp LEFT    &kp DOWN   &kp UP      &kp RIGHT   &kp INS           &mt RCTRL  K_APP
                &kp LALT    &none      &none   &none    &none    &kp C_VOL_DN   &none       &kp END    &none       &kp PG_DN   &kp PAUSE_BREAK   &kp RALT
                                               &trans   &trans   &trans         &trans      &trans     &trans
            >;
        };

        boot_layer {
            bindings = <
                &bootloader   &none          &none          &none          &none          &none          &none          &none          &none          &none          &none          &bootloader
                &bt BT_CLR    &bt BT_SEL 0   &bt BT_SEL 1   &bt BT_SEL 2   &bt BT_SEL 3   &bt BT_SEL 4   &bt BT_SEL 4   &bt BT_SEL 3   &bt BT_SEL 2   &bt BT_SEL 1   &bt BT_SEL 0   &bt BT_CLR
                &sys_reset    &none          &none          &none          &none          &none          &none          &none          &none          &none          &none          &sys_reset
                                                            &trans         &none          &trans         &none          &trans         &trans
            >;
        };
    };
};
